End  = :a*.>aa.
End2 = :a*.>aEnd a.

## Show ~ write only string ##

Show : *.
+ : End2Show.

## Booleans ##

Bool = End2.

True : Bool = :a*,xa.>ax.
False: Bool = :a*.>a:ya.y.

If
  : :a*.>Bool(Bool a)
  = :a*,xBool,ya,za.xayz.

Not
  : EndBool
  = :xBool.IfBool xFalseTrue.

"True" : Show.
"False" : Show.
Show_bool
  : >BoolShow
  = :xBool.IfShow x"True""False".

?? Show_bool(NotTrue).
?? Show_bool(NotFalse).

And : End2Bool = :aBool,bBool.IfBool abFalse. 

?? Show_bool(AndTrueTrue).
?? Show_bool(AndTrueFalse).
?? Show_bool(AndFalseTrue).
?? Show_bool(AndFalseFalse).

Or : End2Bool = :aBool,bBool.IfBool aTrue b. 

?? Show_bool(OrTrueTrue).
?? Show_bool(OrTrueFalse).
?? Show_bool(OrFalseTrue).
?? Show_bool(OrFalseFalse).

## Pairs ##

Pair = :a*,b*,c*.>(>a>bc)c.

Mk_pair : :a*,b*.>a>b Pair ab
        = :a*,b*,xa,yb,c*,f(>a>bc).fxy.

Pi1 : :a*,b*.>(Pair ab)a
    = :a*,b*,p(Pair ab).pa(:xa.>bx).

Pi2 : :a*,b*.>(Pair ab)b
    = :a*,b*,p(Pair ab).pb(>a:yb.y).

?? Show_bool (Pi1BoolBool (Mk_pairBoolBool True False)).
?? Show_bool (Pi2BoolBool (Mk_pairBoolBool True False)).

## Natural numbers ##

Nat = :a*.>a>(End a)a.

0 : Nat    = :a*,za,f(End a).z.
S : EndNat = :xNat,a*,za,f(End a).f(xazf).

"0" : Show.
"S" : Show.
Show_nat
  : >NatShow
  = :xNat.xShow"0"(+"S").

Is_zero : >NatBool = :nNat,a*,xa,ya.nax(>ay).

?? Show_bool (Is_zero(S(S 0))).

Add
  : End2Nat
  = :nNat,mNat,a*,za,f(End a).ma(nazf)f.

?? Show_nat (Add
              (S(S(S 0)))
              (S(S 0))).

## Pairs 2 ##

Show_pair
  : :a*,b*.>(>aShow)>(>bShow)>(Pair ab)Show
  = :a*,b*,f(>aShow),g(>bShow),p(Pair ab).
      + (f(Pi1 abp)) (g(Pi2 abp)).

?? Show_pairNatBoolShow_natShow_bool
       (Mk_pairNatBool (Add(S 0)(S 0)) (NotFalse)).

## Natural numbers 2 ##

Pred : EndNat
     = :nNat.Pi2NatNat
        (n(PairNatNat)
           (Mk_pairNatNat 0 0)
           (:p(PairNatNat).Mk_pairNatNat (S(Pi1NatNat p)) (Pi1NatNat p))).

?? Show_nat (Pred 0).
?? Show_nat (Pred(S 0)).
?? Show_nat (Pred(S(S 0))).
?? Show_nat (Pred(S(S(S 0)))).

Sub : End2Nat = :nNat,mNat.mNat nPred.

?? Show_nat(Sub (S(S(S(S(S 0))))) (S(S 0))).

Mul : End2Nat = :nNat,mNat.mNat 0(Add n).

?? Show_nat(Mul (S(S(S(S(S 0))))) (S(S 0))).

Nat_leq
  : >Nat>NatBool
  = :nNat,mNat.Is_zero(Sub n m).

Nat_eq = :nNat,mNat.And(Nat_leq n m)(Nat_leq m n).

?? Show_bool(Nat_leq (S(S 0)) (S(S(S 0)))).
?? Show_bool(Nat_leq (S(S 0)) (S(S 0))).
?? Show_bool(Nat_leq (S(S 0)) (S 0)).
?? Show_bool(Nat_leq (S(S 0)) 0).

